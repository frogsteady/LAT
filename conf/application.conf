# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  #default.driver = org.h2.Driver
  #default.url = "jdbc:h2:mem:play"
  #default.username = sa
  #default.password = ""

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}

slick.dbs.default.db.driver="org.postgresql.Driver"
slick.dbs.default.driver="slick.driver.PostgresDriver$"
slick.dbs.default.db.url="jdbc:postgresql://localhost:55667/sweet?user=postgres&password=kasper"

//play.http.filters= filters.Filters
//play.filters.disabled += "play.filters.headers.SecurityHeadersFilter"
play.filters.headers.contentSecurityPolicy = "img-src *; default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline'"

play.filters.csrf.header.bypassHeaders {
  X-Requested-With = "*"
  Csrf-Token = "nocheck"
}

play.filters.hosts {
  # Allow requests to example.com, its subdomains, and localhost:9000.
  allowed = ["b7b8cd1b.ngrok.io", "localhost:9000", "localhost:9005"]
}

# SMTP Configuration
mail.smtp.host="smtp.gmail.com"
mail.smtp.port=587
mail.smtp.from="anton@idalko.com"
mail.smtp.user="anton@idalko.com"
mail.smtp.pass="antonidalko"
mail.smtp.ssl=true
//slick.dbs.default.driver="slick.driver.H2Driver$"
//slick.dbs.default.db.profile="org.h2.Driver"
//slick.dbs.default.db.url="jdbc:h2:mem:play;DB_CLOSE_DELAY=-1"


# The SessionCache expiration time if not touched
session.expirationTime = 5 minutes

# Show off distributed cache using akka distributed data
# http://doc.akka.io/docs/akka/current/scala/distributed-data.html
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "cluster"

    # Do enable protobuf serialization
    # http://doc.akka.io/docs/akka/current/scala/remoting.html#Disabling_the_Java_Serializer
    enable-additional-serialization-bindings = on

    # Don't allow insecure java deserialization
    allow-java-serialization = off

    serialization-bindings {
      // Don't allow users to manually invoke java serialization.
      "java.io.Serializable" = none
    }
  }

  remote {
    log-remote-lifecycle-events = off

    artery {
      enabled = on
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
    }
  }

  # Seed nodes are started by ClusterService (you'd typically have several
  # play instances in production with different ip addresses and the same ports,
  # but we fake it here)
//  cluster {
//    metrics.enabled = off
//    jmx.enabled = off
//
//    min-nr-of-members = 2
//    seed-nodes = [
//      "akka://"${play.akka.actor-system}"@127.0.0.1:2551",
//      "akka://"${play.akka.actor-system}"@127.0.0.1:2552"
//    ]
//  }
}

